/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.2
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "..."
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "..."
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "..."
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * method_arg;	/**< @brief method/algorithm used to calculate the checksum (default='crc').  */
  char * method_orig;	/**< @brief method/algorithm used to calculate the checksum original value given at command line.  */
  const char *method_help; /**< @brief method/algorithm used to calculate the checksum help description.  */
  const char *files_help; /**< @brief The rest of command line parameters are file names,\ncompute checksum for each of them help description.  */
  const char *pipe_help; /**< @brief file names provides from pipe (stdin) help description.  */
  char * directory_arg;	/**< @brief operate recursively on directory given.  */
  char * directory_orig;	/**< @brief operate recursively on directory given original value given at command line.  */
  const char *directory_help; /**< @brief operate recursively on directory given help description.  */
  char * name_arg;	/**< @brief name of the checksum cache file (default='.checksum.gz').  */
  char * name_orig;	/**< @brief name of the checksum cache file original value given at command line.  */
  const char *name_help; /**< @brief name of the checksum cache file help description.  */
  char * gzip_arg;	/**< @brief gzip compression level to compress the checksum cache file (default='6').  */
  char * gzip_orig;	/**< @brief gzip compression level to compress the checksum cache file original value given at command line.  */
  const char *gzip_help; /**< @brief gzip compression level to compress the checksum cache file help description.  */
  char * check_arg;	/**< @brief check against the signature, set exit status 0 = OK.  */
  char * check_orig;	/**< @brief check against the signature, set exit status 0 = OK original value given at command line.  */
  const char *check_help; /**< @brief check against the signature, set exit status 0 = OK help description.  */
  char * compute_arg;	/**< @brief compute signature of text argument.  */
  char * compute_orig;	/**< @brief compute signature of text argument original value given at command line.  */
  const char *compute_help; /**< @brief compute signature of text argument help description.  */
  char * format_arg;	/**< @brief format used for find -printf (default='%p\t%s').  */
  char * format_orig;	/**< @brief format used for find -printf original value given at command line.  */
  const char *format_help; /**< @brief format used for find -printf help description.  */
  const char *bare_help; /**< @brief bare checksum output, don't output file name help description.  */
  const char *duplication_help; /**< @brief do duplication handling on the directory given by -d help description.  */
  const char *relax_help; /**< @brief relax on file names, check different file names as well help description.  */
  const char *dry_run_help; /**< @brief perform a trial run with no changes made help description.  */
  unsigned int verbose_min; /**< @brief be verbose's minimum occurreces */
  unsigned int verbose_max; /**< @brief be verbose's maximum occurreces */
  const char *verbose_help; /**< @brief be verbose help description.  */
  const char *show_help_help; /**< @brief show the output of --help instead of generating code help description.  */
  const char *show_full_help_help; /**< @brief show the output of --full-help (i.e., including hidden options) instead of generating code help description.  */
  const char *show_detailed_help_help; /**< @brief show the output of --detailed-help (i.e., including details and hidden options) instead of generating code help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int method_given ;	/**< @brief Whether method was given.  */
  unsigned int files_given ;	/**< @brief Whether files was given.  */
  unsigned int pipe_given ;	/**< @brief Whether pipe was given.  */
  unsigned int directory_given ;	/**< @brief Whether directory was given.  */
  unsigned int name_given ;	/**< @brief Whether name was given.  */
  unsigned int gzip_given ;	/**< @brief Whether gzip was given.  */
  unsigned int check_given ;	/**< @brief Whether check was given.  */
  unsigned int compute_given ;	/**< @brief Whether compute was given.  */
  unsigned int format_given ;	/**< @brief Whether format was given.  */
  unsigned int bare_given ;	/**< @brief Whether bare was given.  */
  unsigned int duplication_given ;	/**< @brief Whether duplication was given.  */
  unsigned int relax_given ;	/**< @brief Whether relax was given.  */
  unsigned int dry_run_given ;	/**< @brief Whether dry-run was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int show_help_given ;	/**< @brief Whether show-help was given.  */
  unsigned int show_full_help_given ;	/**< @brief Whether show-full-help was given.  */
  unsigned int show_detailed_help_given ;	/**< @brief Whether show-detailed-help was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
